@model Test.WebApplication.Commands.PeopleCommand.PeopleChangePasswordGetByIdCommand

@{
  ViewData["Title"] = "ChangePassword";
}
<h1>ChangePassword</h1>
<hr />
<div class="row">
  <div class="col-md-4">
    @if (ViewData.TryGetValue("ChangePassword", out object value))
    {
      if (value != null && (bool)value == true)
      {
        <div class="alert alert-success" role="alert">
          Senha alterado com êxito ...
        </div>
      }
      else if (value != null && (bool)value == false)
      {
        <div class="alert alert-danger" role="alert">
          Senha inválida e não foi alterado ...
        </div>
      }
    }
    <form asp-action="ChangePassword">
      <h3>@Model.Name</h3>
      <div asp-validation-summary="ModelOnly" class="text-danger"></div>
      <input type="hidden" asp-for="Id" />
      <div class="form-group">
        <label asp-for="Password" class="control-label"></label>
        <input asp-for="Password" type="password" class="form-control" />
        <span asp-validation-for="Password" class="text-danger"></span>
      </div>
      <div class="form-group">
        <label asp-for="NewPassord" class="control-label"></label>
        <input asp-for="NewPassord" type="password" class="form-control" />
        <span asp-validation-for="NewPassord" class="text-danger"></span>
      </div>
      <div class="form-group">
        <input type="submit" value="Save" class="btn btn-primary" />
      </div>
    </form>
  </div>
</div>

<div>
  <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
  @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
